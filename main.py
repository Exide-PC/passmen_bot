# –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
from hash import *
from config import *
from markup import *
from database import *
from handlers import *


@bot.callback_query_handler(func=lambda call: True)  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback
def callback(call):
    data = call.data
    message = call.message
    try:
        if data == "addpassword":
            bot.delete_message(message.chat.id, message.message_id)
            bot.send_message(chat_id=message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–∞–π—Ç–∞...",
                             reply_markup=cancel_markup())
            bot.register_next_step_handler(message, addpassword_handler_1)
        elif data.startswith("pwd_"):
            pwd_id = int(data.split("_")[-1])
            pwd = get_password(pwd_id, message.chat.id)
            master_pass = get_master_password_hash(message.chat.id)
            decrypted_pass = decrypt_data(pwd['password'], master_pass)
            decrypted_login = decrypt_data(pwd['login'], decrypted_pass)
            bot.delete_message(message.chat.id, message.message_id)
            bot.send_message(message.chat.id, f"<b>–ê–¥—Ä–µ—Å —Å–∞–π—Ç–∞:</b> <code>{pwd['url']}</code>\n"
                                              f"<b>–õ–æ–≥–∏–Ω:</b> <code>{decrypted_login}</code>\n"
                                              f"<b>–ü–∞—Ä–æ–ª—å:</b> <code>{decrypted_pass}</code>\n"
                                              f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> <i>{pwd['comment']}</i>",
                             reply_markup=password_markup(pwd_id))
        elif data.startswith("remove_"):
            pwd_id = int(data.split("_")[-1])
            delete_password(message.chat.id, pwd_id)
            bot.delete_message(message.chat.id, message.message_id)
            bot.send_message(message.chat.id, f"–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞!", reply_markup=to_passwords())
        elif data == "back_to_passwords":
            bot.delete_message(message.chat.id, message.message_id)
            passwords = get_passwords(message.chat.id)
            bot.send_message(message.chat.id, f"–í—Å–µ –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏:",
                             reply_markup=passwords_markup(passwords))
    except:
        bot.send_message(message.chat.id, f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")


@bot.message_handler(commands=['start'])
def start_handler(message):
    user = hash_data(str(message.chat.id))
    if not os.path.exists(f"Databases/{user}/"):
        bot.send_message(message.chat.id, f"–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å...", reply_markup=strong_password_markup())
        bot.register_next_step_handler(message, configure_database_1)
    else:
        if os.path.exists(f"Databases/{user}/passwords.db.crypt"):
            markup = new_session_markup()
        else:
            markup = main_markup()
        bot.send_message(message.chat.id, f"üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.chat.first_name}!", reply_markup=markup)


@bot.message_handler(content_types=['text'])
def main_handler(message):
    text = message.text
    if text == "–û—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é ‚ûï":
        bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å...")
        bot.register_next_step_handler(message, new_session_handler_1)
    else:
        try:
            if text == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–∞—Ä–æ–ª–∏ üîí":
                passwords = get_passwords(message.chat.id)
                bot.send_message(message.chat.id, f"–í—Å–µ –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏:",
                                 reply_markup=passwords_markup(passwords))
            elif text == "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–¥—ë–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å üîê":
                password = gen_strong_password()
                bot.send_message(message.chat.id, f"<b>–í–∞—à –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏-—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å:</b> <code>{password}</code>")
            elif text == "–ó–∞–∫—Ä—ã—Ç—å —Å–µ—Å—Å–∏—é ‚ùå":
                bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å...")
                bot.register_next_step_handler(message, close_session_handler)
        except:
            bot.send_message(message.chat.id, f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")


bot.polling(none_stop=True, interval=0)  # –ó–∞–ø—É—Å–∫ –≤—Å–µ–≥–æ –±–æ—Ç–∞
