from config import *
from markup import *
from database import *


def configure_database_1(message):
    password = message.text
    if password != "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–¥—ë–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å üîê":
        bot.send_message(message.chat.id, f"–û—Ç–ª–∏—á–Ω–æ, –∞ —Ç–µ–ø–µ—Ä—å –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å...")
        bot.register_next_step_handler(message, configure_database_2, password)
    else:
        password = gen_strong_password()
        salt_1, salt_2 = gen_salt()
        reset_database(message.chat.id, password, salt_1, salt_2)
        bot.send_message(message.chat.id, f"–í–∞—à–∞ –ª–∏—á–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞!", reply_markup=new_session_markup())
        bot.send_message(message.chat.id, f"<b>–í–∞—à –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏-—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å:</b> <code>{password}</code>")


def configure_database_2(message, password):
    repeated_password = message.text
    if repeated_password == password:
        salt_1, salt_2 = gen_salt()
        reset_database(message.chat.id, password, salt_1, salt_2)
        bot.send_message(message.chat.id, f"–í–∞—à–∞ –ª–∏—á–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞!", reply_markup=new_session_markup())
    else:
        bot.send_message(message.chat.id, f"–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!")
        bot.send_message(message.chat.id, f"–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å...")
        bot.register_next_step_handler(message, configure_database_1)


def new_session_handler_1(message):
    password = message.text
    user = hash_data(str(message.chat.id))
    try:
        decrypt(f"Databases/{user}/config.json.crypt", password)
        decrypt(f"Databases/{user}/passwords.db.crypt", password)
    except:
        bot.send_message(message.chat.id, f"–ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π ‚ùå")
    else:
        bot.send_message(message.chat.id, f"‚ÄºÔ∏è –í–ù–ò–ú–ê–ù–ò–ï ‚ÄºÔ∏è\n\n"
                                          f"–ù–∞ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏ –≤–∞—à–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç—Å—è, "
                                          f"–ø–æ—ç—Ç–æ–º—É –ø–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –ø–æ-—Å–∫–æ—Ä–µ–µ –∑–∞–∫—Ä—ã—Ç—å —Å–µ—Å—Å–∏—é!!!")
        bot.send_message(message.chat.id, f"–°–µ—Å—Å–∏—è –æ—Ç–∫—Ä—ã—Ç–∞!", reply_markup=main_markup())


def close_session_handler(message):
    password = message.text
    user = hash_data(str(message.chat.id))
    salt_1, salt_2 = get_salt(message.chat.id)
    pass_hash = hash_data(password, salt=[salt_1, salt_2])
    master_password = get_master_password_hash(message.chat.id)
    if pass_hash == master_password:
        encrypt(f"Databases/{user}/config.json", password=password)
        encrypt(f"Databases/{user}/passwords.db", password=password)
        bot.send_message(message.chat.id, f"–°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∞!",
                         reply_markup=new_session_markup())
    else:
        bot.send_message(message.chat.id, f"–ú–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π ‚ùå")


def addpassword_handler_1(message):
    url = message.text
    if url != "–û—Ç–º–µ–Ω–∏—Ç—å üîò":
        bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω...")
        bot.register_next_step_handler(message, addpassword_handler_2, url)
    else:
        passwords = get_passwords(message.chat.id)
        bot.send_message(message.chat.id, f"–í—Å–µ –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏:",
                         reply_markup=passwords_markup(passwords))


def addpassword_handler_2(message, url):
    login = message.text
    if login != "–û—Ç–º–µ–Ω–∏—Ç—å üîò":
        bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å...", reply_markup=gen_strong_password_markup())
        bot.register_next_step_handler(message, addpassword_handler_3, url, login)
    else:
        passwords = get_passwords(message.chat.id)
        bot.send_message(message.chat.id, f"–í—Å–µ –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏:",
                         reply_markup=passwords_markup(passwords))


def addpassword_handler_3(message, url, login):
    password = message.text
    if password != "–û—Ç–º–µ–Ω–∏—Ç—å üîò":
        if password != "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–¥—ë–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å üîê":
            bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–ø–∏—Å–∏...", reply_markup=set_empty_comment())
            bot.register_next_step_handler(message, addpassword_handler_4, url, login, password)
        else:
            password = gen_strong_password()
            bot.send_message(message.chat.id, f"<b>–í–∞—à –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏-—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å:</b> <code>{password}</code>")
            bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–ø–∏—Å–∏...", reply_markup=set_empty_comment())
            bot.register_next_step_handler(message, addpassword_handler_4, url, login, password)
    else:
        passwords = get_passwords(message.chat.id)
        bot.send_message(message.chat.id, f"–í—Å–µ –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏:",
                         reply_markup=passwords_markup(passwords))


def addpassword_handler_4(message, url, login, password):
    comment = message.text
    if comment != "–û—Ç–º–µ–Ω–∏—Ç—å üîò":
        if comment == "–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—É—Å—Ç—ã–º üîò":
            comment = ""
        master_password = get_master_password_hash(message.chat.id)
        add_password(message.chat.id, url, encrypt_data(login, password),
                     encrypt_data(password, master_password), comment)
        passwords = get_passwords(message.chat.id)
        bot.send_message(message.chat.id, f"–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ ‚úÖ",
                         reply_markup=main_markup())
        bot.send_message(message.chat.id, f"–í—Å–µ –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏:",
                         reply_markup=passwords_markup(passwords))
    else:
        passwords = get_passwords(message.chat.id)
        bot.send_message(message.chat.id, f"–í—Å–µ –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏:",
                         reply_markup=passwords_markup(passwords))
